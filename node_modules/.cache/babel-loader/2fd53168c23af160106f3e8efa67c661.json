{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adriana\\\\codenation\\\\react-16\\\\src\\\\routes\\\\FeedRoute\\\\FeedRoute.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Stories from '../../containers/Stories';\nimport Loading from '../../components/Loading';\nimport Posts from '../../containers/Posts';\nimport './FeedRoute.scss';\n\nconst FeedRoute = () => {\n  // setting states \n  const [isLoading, setIsLoading] = useState(true);\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [stories, setStories] = useState([]); // set loading to false if all the api calls have already returned  \n\n  const updateLoading = useCallback(() => {\n    if (users.length > 0 && posts.length > 0 && stories.length > 0) {\n      setIsLoading(false);\n    }\n  }, [users.length, posts.length, stories.length]); // api call to get users\n\n  useEffect(() => {\n    fetch(\"https://5e7d0266a917d70016684219.mockapi.io/api/v1/users\").then(res => res.json()).then(response => {\n      setUsers(response);\n      updateLoading();\n    });\n  }, [updateLoading]); // api call to get posts\n\n  useEffect(() => {\n    fetch(\"\thttps://5e7d0266a917d70016684219.mockapi.io/api/v1/users/1/posts\").then(res => res.json()).then(res => {\n      setPosts(res);\n      updateLoading();\n    });\n  }, [updateLoading]); // api call to get stories\n\n  useEffect(() => {\n    fetch(\"https://5e7d0266a917d70016684219.mockapi.io/api/v1/stories\").then(res => res.json()).then(response => {\n      setStories(response);\n      updateLoading();\n    });\n  }, [updateLoading]); // returns an user object and if it's not found, returns a default object\n\n  const getUserHandler = userId => {\n    const result = users.find(user => user.id === userId);\n    return result.length > 0 ? result[0] : {\n      id: userId,\n      name: `USER NOT FOUND (userId = ${userId})`,\n      avatar: \"\",\n      username: \"\",\n      email: \"\"\n    };\n  };\n\n  console.log(getUserHandler(1));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-testid\": \"feed-route\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }), !isLoading && /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stories, {\n    stories: stories,\n    getUserHandler: getUserHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Posts, {\n    posts: posts,\n    getUserHandler: getUserHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default FeedRoute;","map":{"version":3,"sources":["C:/Users/Adriana/codenation/react-16/src/routes/FeedRoute/FeedRoute.jsx"],"names":["React","useState","useEffect","useCallback","Stories","Loading","Posts","FeedRoute","isLoading","setIsLoading","users","setUsers","posts","setPosts","stories","setStories","updateLoading","length","fetch","then","res","json","response","getUserHandler","userId","result","find","user","id","name","avatar","username","email","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,OAAO,kBAAP;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC,CALsB,CAOtB;;AACA,QAAMe,aAAa,GAAGb,WAAW,CAAC,MAAM;AACtC,QAAGO,KAAK,CAACO,MAAN,GAAe,CAAf,IAAoBL,KAAK,CAACK,MAAN,GAAe,CAAnC,IAAwCH,OAAO,CAACG,MAAR,GAAiB,CAA5D,EAA8D;AAC5DR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAJgC,EAI9B,CAACC,KAAK,CAACO,MAAP,EAAeL,KAAK,CAACK,MAArB,EAA6BH,OAAO,CAACG,MAArC,CAJ8B,CAAjC,CARsB,CAgBtB;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,KAAK,CAAC,0DAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,QAAQ,IAAI;AAChBX,MAAAA,QAAQ,CAACW,QAAD,CAAR;AACAN,MAAAA,aAAa;AACd,KALD;AAMD,GAPQ,EAON,CAACA,aAAD,CAPM,CAAT,CAjBsB,CA2BtB;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,KAAK,CAAC,mEAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMC,GAAG,IAAI;AACXP,MAAAA,QAAQ,CAACO,GAAD,CAAR;AACAJ,MAAAA,aAAa;AACd,KALD;AAMD,GAPQ,EAON,CAACA,aAAD,CAPM,CAAT,CA5BsB,CAqCtB;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,KAAK,CAAC,4DAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,QAAQ,IAAI;AAChBP,MAAAA,UAAU,CAACO,QAAD,CAAV;AACAN,MAAAA,aAAa;AACd,KALD;AAMD,GAPQ,EAON,CAACA,aAAD,CAPM,CAAT,CAtCsB,CA+CtB;;AACA,QAAMO,cAAc,GAAIC,MAAD,IAAY;AACjC,UAAMC,MAAM,GAAGf,KAAK,CAACgB,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,MAAjC,CAAf;AACA,WAAOC,MAAM,CAACR,MAAP,GAAgB,CAAhB,GAAoBQ,MAAM,CAAC,CAAD,CAA1B,GAAgC;AACrCG,MAAAA,EAAE,EAACJ,MADkC;AAErCK,MAAAA,IAAI,EAAG,4BAA2BL,MAAO,GAFJ;AAGrCM,MAAAA,MAAM,EAAE,EAH6B;AAIrCC,MAAAA,QAAQ,EAAE,EAJ2B;AAKrCC,MAAAA,KAAK,EAAE;AAL8B,KAAvC;AAOD,GATD;;AAUAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,cAAc,CAAC,CAAD,CAA1B;AAEA,sBACE;AAAK,mBAAY,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGf,SAAS,iBAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADhB,EAEG,CAACA,SAAD,iBACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEM,OAAlB;AAA2B,IAAA,cAAc,EAAES,cAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEX,KAAd;AAAqB,IAAA,cAAc,EAAEW,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAHJ,CADF;AAWD,CAvED;;AAyEA,eAAehB,SAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport Stories from '../../containers/Stories';\nimport Loading from '../../components/Loading';\n\nimport Posts from '../../containers/Posts';\n\nimport './FeedRoute.scss';\n\nconst FeedRoute = () => {\n  // setting states \n  const [isLoading, setIsLoading] = useState(true);\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [stories, setStories] = useState([]);\n  \n  // set loading to false if all the api calls have already returned  \n  const updateLoading = useCallback(() => {\n    if(users.length > 0 && posts.length > 0 && stories.length > 0){\n      setIsLoading(false);\n    }\n  }, [users.length, posts.length, stories.length])\n\n  \n\n  // api call to get users\n  useEffect(() => {\n    fetch(\"https://5e7d0266a917d70016684219.mockapi.io/api/v1/users\")\n    .then(res => res.json())\n    .then(response => {\n      setUsers(response);\n      updateLoading(); \n    });\n  }, [updateLoading]);\n\n\n  // api call to get posts\n  useEffect(() => {\n    fetch(\"\thttps://5e7d0266a917d70016684219.mockapi.io/api/v1/users/1/posts\")\n    .then(res => res.json())\n    .then(res => {\n      setPosts(res);\n      updateLoading();\n    })\n  }, [updateLoading]);\n\n  // api call to get stories\n  useEffect(() => {\n    fetch(\"https://5e7d0266a917d70016684219.mockapi.io/api/v1/stories\")\n    .then(res => res.json())\n    .then(response => {\n      setStories(response);\n      updateLoading();\n    })\n  }, [updateLoading]);\n\n  // returns an user object and if it's not found, returns a default object\n  const getUserHandler = (userId) => {\n    const result = users.find((user) => user.id === userId);\n    return result.length > 0 ? result[0] : {\n      id:userId, \n      name: `USER NOT FOUND (userId = ${userId})`,\n      avatar: \"\",\n      username: \"\",\n      email: \"\"\n    };  \n  } \n  console.log(getUserHandler(1))\n  \n  return (\n    <div data-testid=\"feed-route\">\n      {isLoading && <Loading />}\n      {!isLoading && (\n        <React.Fragment>\n          <Stories stories={stories} getUserHandler={getUserHandler} />\n          <Posts posts={posts} getUserHandler={getUserHandler} />\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default FeedRoute;\n"]},"metadata":{},"sourceType":"module"}